summarise(confirmed = sum(Confirmed, na.rm = F), deaths = sum(Deaths, na.rm = F), active = sum(Active, na.rm = F))
g <- ggplot(datall)
g + geom_bar(aes(y = confirmed), stat = 'count')
g + geom_bar(aes(x = confirmed), stat = 'count')
datall <- datall %>%
group_by(Country.Region, Last.Update) %>%
summarise(confirmed = sum(Confirmed, na.rm = F), deaths = sum(Deaths, na.rm = F), active = sum(Active, na.rm = F)) %>% ungroup()
datall <- bind_rows(dat1, dat2, dat3, dat4, dat5, dat6, dat7)
datall <- datall %>%
group_by(Country.Region, Last.Update) %>%
summarise(confirmed = sum(Confirmed, na.rm = F), deaths = sum(Deaths, na.rm = F), active = sum(Active, na.rm = F)) %>% ungroup()
g + geom_bar(aes(x = confirmed), stat = 'count')
g + geom_bar(aes(x = confirmed, y = Country.Region), stat = 'count')
g + geom_bar(aes(x = confirmed, y = Country.Region), stat = 'identity')
g + geom_bar(aes(y = confirmed, x = Country.Region), stat = 'identity')
View(datall)
View(dat)
datall <- bind_rows(dat1, dat2, dat3, dat4, dat5, dat6, dat7)
View(datall)
datall <- datall %>%
group_by(Country.Region, Last.Update) %>%
summarise(confirmed = sum(Confirmed, na.rm = F), deaths = sum(Deaths, na.rm = F), active = sum(Active, na.rm = F), recovered = sum(Recovered, na.rm = F)) %>% ungroup()
g <- ggplot(datall)
g + geom_bar(aes(y = confirmed, x = Country.Region), stat = 'identity')
g + geom_bar(aes(y = deaths, x = Country.Region), stat = 'identity')
g + geom_bar(aes(y = active, x = Country.Region), stat = 'identity')
g + geom_bar(aes(y = recovered, x = Country.Region), stat = 'identity')
g <- ggplot(datall) + theme(axis.title.x = element_text(angle = 90, hjust = 1))
# Plots of country vs counts
g + geom_bar(aes(y = confirmed, x = Country.Region), stat = 'identity')
g <- ggplot(datall) + theme(axis.title.x = element_text(angle = 90, hjust = 1))
# Plots of country vs counts
g + geom_bar(aes(y = confirmed, x = Country.Region), stat = 'identity')
g <- ggplot(datall) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Plots of country vs counts
g + geom_bar(aes(y = confirmed, x = Country.Region), stat = 'identity')
g + geom_bar(aes(y = deaths, x = Country.Region), stat = 'identity')
g + geom_bar(aes(y = active, x = Country.Region), stat = 'identity')
g + geom_bar(aes(y = recovered, x = Country.Region), stat = 'identity')
View(datall)
# plots of global vs time
## add filter for time and country
g + geom_line(aes(y = confirmed, x = Last.Update), stat = 'identity')
# plots of global vs time
## add filter for time and country
g + geom_line(aes(y = confirmed, x = Last.Update))
g + geom_line(aes(y = deaths, x = Last.Update), stat = 'identity')
View(datall)
# plots of global vs time
## add filter for time and country
g + geom_line(aes(y = confirmed, x = Last.Update))
class(datall$Last.Update)
# plots of global vs time
## add filter for time and country
g + geom_line(aes(x = confirmed, y = Last.Update))
# plots of global vs time
## add filter for time and country
g + geom_line(aes(y = confirmed, x = Last.Update)) + scale_x_date(date_minor_breaks = "2 day")
# plots of global vs time
## add filter for time and country
datall2 <- datall %>%
group_by(Last.Update) %>%
summarise(confirmed = sum(Confirmed, na.rm = F), deaths = sum(Deaths, na.rm = F), active = sum(Active, na.rm = F), recovered = sum(Recovered, na.rm = F)) %>% ungroup()
# plots of global vs time
## add filter for time and country
datall2 <- datall %>%
group_by(Last.Update) %>%
summarise(confirmed = sum(confirmed, na.rm = F), deaths = sum(deaths, na.rm = F), active = sum(active, na.rm = F), recovered = sum(deaths, na.rm = F)) %>% ungroup()
g <- ggplot(datall2) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
g + geom_line(aes(y = confirmed, x = Last.Update)) + scale_x_date(date_minor_breaks = "2 day")
g + geom_line(aes(y = confirmed, x = Last.Update)) +
scale_x_date(date_minor_breaks = "2 day", date_labels = "%d/%m/%Y")
View(datall2)
lubridate::guess_formats(datall$Last.Update)
lubridate::guess_formats(datall$Last.Update, orders = "Bdy")
lubridate::guess_formats(datall$Last.Update, orders = c("%y-%m-%d"), print_matches = T)
lubridate::guess_formats(as.character(datall$Last.Update), orders = c("%y-%m-%d"), print_matches = T)
lubridate::guess_formats(as.character(datall$Last.Update), orders = c("%y-%m-%d", "%Y-%m-%d"), print_matches = T)
lubridate::guess_formats(as.character(dat$Last.Update),
orders = c("%m/%d/%Y %H:%M",
"%Y-%m-%d %H:%M:%S"))
lubridate::guess_formats(as.character(dat$Last.Update),
orders = c("%m/%d/%Y %H:%M",
"%Y-%m-%d %H:%M:%S"), print_matches = T)
lubridate::guess_formats(as.character(datall$Last.Update), orders = c("%y-%m-%d", "%Y-%m-%d"), print_matches = T)
lubridate::guess_formats(as.character(datall$Last.Update), orders = c("%y-%m-%d", "%Y-%m-%d"), print_matches = T)
arrange(datall2$Last.Update)
order(datall2$Last.Update)
sort(datall2$Last.Update)
format(datall$Last.Update, "%Y-%m-%d")
format(datall$Last.Update, "%y-%m-%d")
sort(format(datall$Last.Update, "%y-%m-%d"))
datall$Last.Update <- format(datall$Last.Update, "%y-%m-%d"))
# plots of global vs time
## add filter for time and country
datall2 <- datall %>%
group_by(Last.Update) %>%
summarise(confirmed = sum(confirmed, na.rm = F), deaths = sum(deaths, na.rm = F), active = sum(active, na.rm = F), recovered = sum(deaths, na.rm = F)) %>% ungroup()
g <- ggplot(datall2) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
g + geom_line(aes(y = confirmed, x = Last.Update)) +
scale_x_date(date_minor_breaks = "2 day", date_labels = "%d/%m/%Y")
g + geom_line(aes(y = confirmed, x = Last.Update)) +
scale_x_date(date_minor_breaks = "2 day", date_labels = "%d/%m/%Y")
View(datall2)
datall$Last.Update <- format(datall$Last.Update, "%y-%m-%d"))
datall$Last.Update <- format(datall$Last.Update, "%y-%m-%d")
# plots of global vs time
## add filter for time and country
datall2 <- datall %>%
group_by(Last.Update) %>%
summarise(confirmed = sum(confirmed, na.rm = F), deaths = sum(deaths, na.rm = F), active = sum(active, na.rm = F), recovered = sum(deaths, na.rm = F)) %>% ungroup()
g <- ggplot(datall2) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
g + geom_line(aes(y = confirmed, x = Last.Update)) +
scale_x_date(date_minor_breaks = "2 day", date_labels = "%d/%m/%Y")
class(datall$Last.Update)
View(datall)
datall$Last.Update <- strftime(datall$Last.Update, "%y-%m-%d")
datall$Last.Update
class(datall$Last.Update)
datall$Last.Update <- as.Date(strftime(datall$Last.Update, "%y-%m-%d"))
datall$Last.Update
class(datall$Last.Update)
datall$Last.Update <- as.Date(strftime(datall$Last.Update, "%y-%m-%d"))
datall$Last.Update <- as.Date(format(datall$Last.Update, "%y-%m-%d"))
# plots of global vs time
## add filter for time and country
datall2 <- datall %>%
group_by(Last.Update) %>%
summarise(confirmed = sum(confirmed, na.rm = F), deaths = sum(deaths, na.rm = F), active = sum(active, na.rm = F), recovered = sum(deaths, na.rm = F)) %>% ungroup()
g <- ggplot(datall2) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
g + geom_line(aes(y = confirmed, x = Last.Update)) +
scale_x_date(date_minor_breaks = "2 day", date_labels = "%d/%m/%Y")
g + geom_line(aes(y = confirmed, x = Last.Update)) +
scale_x_date(date_minor_breaks = "1 day", date_labels = "%d/%m/%Y")
g + geom_line(aes(y = deaths, x = Last.Update), stat = 'identity')
g + geom_line(aes(y = deaths, x = Last.Update), stat = 'identity')
g + geom_line(aes(y = active, x = Last.Update), stat = 'identity')
g + geom_line(aes(y = recovered, x = Last.Update), stat = 'identity')
} # End of shiny function
g + geom_line(aes(y = confirmed, x = Last.Update)) +
scale_x_date(date_minor_breaks = "1 day", date_labels = "%d/%b/%Y")
g + geom_line(aes(y = confirmed, x = Last.Update)) +
scale_x_date(date_minor_breaks = "1 day", date_labels = "%d %b/%Y")
g + geom_line(aes(y = confirmed, x = Last.Update)) +
scale_x_date(date_minor_breaks = "1 day", date_labels = "%d %b %Y")
datall$Last.Update <- as.Date(format(datall$Last.Update, "%Y-%m-%d"))
datall$Last.Update
format(datall$Last.Update, "%Y-%m-%d")
datall$Last.Update <- as.Date(format(datall$Last.Update, "%Y-%m-%d"))
View(datall)
g + geom_line(aes(y = confirmed, x = Last.Update)) +
scale_x_date(date_minor_breaks = "1 day", date_labels = "%d %b")
g <- ggplot(datall2) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_date(date_minor_breaks = "1 day", date_labels = "%d %b")
g + geom_line(aes(y = confirmed, x = Last.Update))
g + geom_line(aes(y = deaths, x = Last.Update))
g + geom_line(aes(y = active, x = Last.Update))
g + geom_line(aes(y = recovered, x = Last.Update))
g <- ggplot(datall) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_date(date_minor_breaks = "1 day", date_labels = "%d %b")
g + geom_line(aes(y = confirmed, x = Last.Update))
g + geom_line(aes(y = deaths, x = Last.Update))
g + geom_line(aes(y = active, x = Last.Update))
g <- ggplot(datall2) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_date(date_minor_breaks = "1 day", date_labels = "%d %b")
g + geom_line(aes(y = confirmed, x = Last.Update))
g + geom_line(aes(y = deaths, x = Last.Update))
g + geom_line(aes(y = active, x = Last.Update))
g + geom_line(aes(y = recovered, x = Last.Update))
g + geom_line(aes(y = recovered, x = Last.Update, color = Country.Region))
g <- ggplot(datall2) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_date(date_minor_breaks = "1 day", date_labels = "%d %b")
g + geom_line(aes(y = recovered, x = Last.Update, color = Country.Region))
g <- ggplot(datall) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_date(date_minor_breaks = "1 day", date_labels = "%d %b")
g + geom_line(aes(y = active, x = Last.Update))
#
# This is the user-interface definition of a Shiny web application. You can
# run the application by clicking 'Run App' above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
datanames <- list.files("data/COVID-19-master/csse_covid_19_data/csse_covid_19_daily_reports",
pattern = "\\.csv$",
full.names = T)
for(i in 1:60){
# fname <-  str_extract(string = datanames,
#                       pattern = pat)[i]
assign("fname",
read.csv(datanames[i])
)
if(i == 1){
x = fname
}
else {
x <- bind_rows(x, fname)
}
}
for(i in 61:83){
# fnamey <-  str_extract(string = datanames,
#                       pattern = pat)[i]
assign("fname",
read.csv(datanames[i])
)
if(i == 61){
y = fname
}
else {
y <- bind_rows(y, fname)
}
}
y <- y %>% rename(Last.Update = Last_Update, Province.State = Province_State,
Latitude = Lat, Longitude = Long_, Country.Region = Country_Region)
dat <- bind_rows(x, y) %>% select(2:6, 11)
# Cleaning date. Till 560 --> %d/%m/%Y %h:% // rest --> automatic as_datetime
dat1 <- dat[1:560,]
dat2 <- dat[561:7617,]
dat3 <- dat[7618:11034,]
dat4 <- dat[11035:17102,]
dat5 <- dat[17103:28136,]
dat6 <- dat[28137:38439,]
dat7 <- dat[38440:43358,]
dat8 <- dat[43359:45927,]
dat9 <- dat[45928:77354,]
dat1$Last.Update <- as.Date(dat1$Last.Update, format = "%m/%d/%Y %H:%M")
dat2$Last.Update <- as.Date(dat2$Last.Update)
dat3$Last.Update <- as.Date(dat3$Last.Update, format = "%m/%d/%y %H:%M")
dat4$Last.Update <- as.Date(dat4$Last.Update)
dat5$Last.Update <- as.Date(dat5$Last.Update)
dat6$Last.Update <- as.Date(dat6$Last.Update, format = "%m/%d/%y %H:%M")
dat7$Last.Update <- as.Date(dat7$Last.Update, format = "%Y-%m-%d %H:%M")
dat8$Last.Update <- as.Date(dat8$Last.Update, format = "%m/%d/%Y %H:%M")
dat9$Last.Update <- as.Date(dat9$Last.Update, format = "%Y-%m-%d %H:%M:%S")
datall <- bind_rows(dat1, dat2, dat3, dat4, dat5, dat6, dat7)
datall$Last.Update <- as.Date(format(datall$Last.Update, "%y-%m-%d"))
View(datall)
runApp()
View(datall)
runApp()
runApp()
runApp()
runApp()
order(5:12,1)
order(5:12)
runApp()
runApp()
runApp()
runApp()
View(datall)
runApp()
DT::datatable(data = dat)
View(dat)
dat <- reactive({
datall %>% filter(Country.Region %in% input$countries & Last.Update %in% input$dates) %>%
group_by(Country.Region, Last.Update)
})
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(datall)
DT::datatable(data = dat())
DT::datatable(datall)
runApp()
runApp()
runApp()
update.packages(ask = FALSE)
library(jsonlite)
install.packages(c("htmltools", "htmlwidgets"))
install.packages(c("htmltools", "htmlwidgets"))
install.packages(c("htmltools", "htmlwidgets"))
install.packages(c("htmltools", "htmlwidgets"))
install.packages(c("htmltools", "htmlwidgets"))
install.packages(c("htmltools", "htmlwidgets"))
install.packages("htmlwidgets")
shiny::runApp()
runApp()
runApp()
switch ,
case = action
)
runApp()
install.packages(c("DT", "shiny"))
install.packages(c("DT", "shiny"))
install.packages(c("DT", "shiny"))
install.packages(c("DT", "shiny"))
install.packages(c("DT", "shiny"))
install.packages(c("DT", "shiny"))
install.packages("DT")
install.packages(c("shiny", "shinyjs"))
install.packages(c("shiny", "shinyjs"))
install.packages("shiny")
install.packages("shiny")
install.packages("shiny")
install.packages("fastmap")
install.packages("remotes")
remotes::install_version("shiny", "1.4", upgrade=FALSE)
remotes::install_version("shiny", "1.4.0", upgrade=FALSE)
install.packages("testthat")
install.packages("testthat")
install.packages("testthat")
install.packages("rlang")
load("~/Documents/datasci/covid-19/covid-19/.RData")
install.packages("htmltools")
shiny::runApp()
runApp()
datanames <- list.files("data/COVID-19-master/csse_covid_19_data/csse_covid_19_daily_reports",
pattern = "\\.csv$",
full.names = T)
for(i in 1:60){
# fname <-  str_extract(string = datanames,
#                       pattern = pat)[i]
assign("fname",
read.csv(datanames[i])
)
if(i == 1){
x = fname
}
else {
x <- bind_rows(x, fname)
}
}
for(i in 61:83){
# fnamey <-  str_extract(string = datanames,
#                       pattern = pat)[i]
assign("fname",
read.csv(datanames[i])
)
if(i == 61){
y = fname
}
else {
y <- bind_rows(y, fname)
}
}
y <- y %>% rename(Last.Update = Last_Update, Province.State = Province_State,
Latitude = Lat, Longitude = Long_, Country.Region = Country_Region)
dat <- bind_rows(x, y) %>% select(2:6, 11)
# Cleaning date. Till 560 --> %d/%m/%Y %h:% // rest --> automatic as_datetime
dat1 <- dat[1:560,]
dat2 <- dat[561:7617,]
dat3 <- dat[7618:11034,]
dat4 <- dat[11035:17102,]
dat5 <- dat[17103:28136,]
dat6 <- dat[28137:38439,]
dat7 <- dat[38440:43358,]
dat8 <- dat[43359:45927,]
dat9 <- dat[45928:77354,]
dat1$Last.Update <- as.Date(dat1$Last.Update, format = "%m/%d/%Y %H:%M")
dat2$Last.Update <- as.Date(dat2$Last.Update)
dat3$Last.Update <- as.Date(dat3$Last.Update, format = "%m/%d/%y %H:%M")
dat4$Last.Update <- as.Date(dat4$Last.Update)
datanames <- list.files("data/COVID-19-master/csse_covid_19_data/csse_covid_19_daily_reports",
pattern = "\\.csv$",
full.names = T)
for(i in 1:60){
# fname <-  str_extract(string = datanames,
#                       pattern = pat)[i]
assign("fname",
read.csv(datanames[i])
)
if(i == 1){
x = fname
}
else {
x <- bind_rows(x, fname)
}
}
for(i in 61:83){
# fnamey <-  str_extract(string = datanames,
#                       pattern = pat)[i]
assign("fname",
read.csv(datanames[i])
)
if(i == 61){
y = fname
}
else {
y <- bind_rows(y, fname)
}
}
y <- y %>% rename(Last.Update = Last_Update, Province.State = Province_State,
Latitude = Lat, Longitude = Long_, Country.Region = Country_Region)
dat <- bind_rows(x, y) %>% select(2:6, 11)
# Cleaning date. Till 560 --> %d/%m/%Y %h:% // rest --> automatic as_datetime
dat1 <- dat[1:560,]
dat2 <- dat[561:7617,]
dat3 <- dat[7618:11034,]
dat4 <- dat[11035:17102,]
dat5 <- dat[17103:28136,]
dat6 <- dat[28137:38439,]
dat7 <- dat[38440:43358,]
dat8 <- dat[43359:45927,]
dat9 <- dat[45928:77354,]
dat1$Last.Update <- as.Date(dat1$Last.Update, format = "%m/%d/%Y %H:%M")
dat2$Last.Update <- as.Date(dat2$Last.Update)
datanames <- list.files("data/COVID-19-master/csse_covid_19_data/csse_covid_19_daily_reports",
pattern = "\\.csv$",
full.names = T)
for(i in 1:60){
# fname <-  str_extract(string = datanames,
#                       pattern = pat)[i]
assign("fname",
read.csv(datanames[i])
)
if(i == 1){
x = fname
}
else {
x <- bind_rows(x, fname)
}
}
library(shiny)
library(tidyverse)
datanames <- list.files("data/COVID-19-master/csse_covid_19_data/csse_covid_19_daily_reports",
pattern = "\\.csv$",
full.names = T)
for(i in 1:60){
# fname <-  str_extract(string = datanames,
#                       pattern = pat)[i]
assign("fname",
read.csv(datanames[i])
)
if(i == 1){
x = fname
}
else {
x <- bind_rows(x, fname)
}
}
for(i in 61:83){
# fnamey <-  str_extract(string = datanames,
#                       pattern = pat)[i]
assign("fname",
read.csv(datanames[i])
)
if(i == 61){
y = fname
}
else {
y <- bind_rows(y, fname)
}
}
y <- y %>% rename(Last.Update = Last_Update, Province.State = Province_State,
Latitude = Lat, Longitude = Long_, Country.Region = Country_Region)
dat <- bind_rows(x, y) %>% select(2:6, 11)
# Cleaning date. Till 560 --> %d/%m/%Y %h:% // rest --> automatic as_datetime
dat1 <- dat[1:560,]
dat2 <- dat[561:7617,]
dat3 <- dat[7618:11034,]
dat4 <- dat[11035:17102,]
dat5 <- dat[17103:28136,]
dat6 <- dat[28137:38439,]
dat7 <- dat[38440:43358,]
dat8 <- dat[43359:45927,]
dat9 <- dat[45928:77354,]
dat1$Last.Update <- as.Date(dat1$Last.Update, format = "%m/%d/%Y %H:%M")
dat2$Last.Update <- as.Date(dat2$Last.Update)
dat3$Last.Update <- as.Date(dat3$Last.Update, format = "%m/%d/%y %H:%M")
dat4$Last.Update <- as.Date(dat4$Last.Update)
dat5$Last.Update <- as.Date(dat5$Last.Update)
dat6$Last.Update <- as.Date(dat6$Last.Update, format = "%m/%d/%y %H:%M")
dat7$Last.Update <- as.Date(dat7$Last.Update, format = "%Y-%m-%d %H:%M")
dat8$Last.Update <- as.Date(dat8$Last.Update, format = "%m/%d/%Y %H:%M")
dat9$Last.Update <- as.Date(dat9$Last.Update, format = "%Y-%m-%d %H:%M:%S")
datall <- bind_rows(dat1, dat2, dat3, dat4, dat5, dat6, dat7)
datall$Last.Update <- as.Date(format(datall$Last.Update, "%y-%m-%d"))
datall <- datall %>%
group_by(Country.Region, Last.Update) %>%
summarise(confirmed = sum(Confirmed, na.rm = F),
deaths = sum(Deaths, na.rm = F),
active = sum(Active, na.rm = F),
recovered = sum(Recovered, na.rm = F)) %>%
ungroup()
# plots of global vs time
## add filter for time and country
datall2 <- datall %>%
group_by(Last.Update) %>%
summarise(confirmed = sum(confirmed, na.rm = F), deaths = sum(deaths, na.rm = F), active = sum(active, na.rm = F), recovered = sum(deaths, na.rm = F)) %>% ungroup()
g <- ggplot(datall2) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_date(date_minor_breaks = "1 day", date_labels = "%d %b")
g + geom_line(aes(y = confirmed, x = Last.Update))
g + geom_line(aes(y = deaths, x = Last.Update))
g + geom_line(aes(y = active, x = Last.Update))
g + geom_line(aes(y = recovered, x = Last.Update))
runApp()
runApp()
