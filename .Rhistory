dat2 <- dat[561:7617,]
dat3 <- dat[7618:11034,]
dat4 <- dat[11035:17102,]
dat5 <- dat[17103:11035,]
dat6 <- dat[11036:nrow(dat),]
560+7057+3417+6068+6069+66319
nrow(dat)
7617-564
7617-561
View(dat1)
View(dat2)
View(dat3)
View(dat4)
View(dat5)
View(dat6)
nrow(dat)
dat1$Last.Update <- as.POSIXct(dat1$Last.Update, format = "%m/%d/%Y %H:%M")
dat2$Last.Update <- as.POSIXct(dat2$Last.Update)
dat3$Last.Update <- as.POSIXct(dat3$Last.Update, format = "%m/%d/%y %H:%M")
dat4$Last.Update <- as.POSIXct(dat4$Last.Update)
dat5$Last.Update <- as.POSIXct(dat5$Last.Update)
dat6$Last.Update <- as.POSIXct(dat6$Last.Update, format = "%m/%d/%y %H:%M")
nrow(dat1)
nrow(dat2)
nrow(dat3)
nrow(dat4)
nrow(dat5)
nrow(dat6)
View(dat6)
# which.min(is.na(dat6$Last.Update))
# which.max(is.na(dat6$Last.Update))
datall <- rbind(dat1, dat2, dat3, dat4, dat5, dat5)
# which.min(is.na(dat6$Last.Update))
# which.max(is.na(dat6$Last.Update))
datall <- rbind(dat1, dat2, dat3, dat4, dat5, dat6)
# which.min(is.na(dat6$Last.Update))
# which.max(is.na(dat6$Last.Update))
datall <- bind_rows(dat1, dat2, dat3, dat4, dat5, dat6)
560+7057
560+7057+3417
560+7057+3417+6068
560+7057+3417+6068+6069
560+7057+3417+6068+6069
dat5 <- dat[17103:nrow(dat),]
dat5$Last.Update <- as.POSIXct(dat5$Last.Update)
dat5 <- dat[17103:nrow(dat),]
dat5$Last.Update <- as.Date(dat5$Last.Update)
dat5$Last.Update <- as.Date(dat5$Last.Update)
dat5 <- dat[17103:nrow(dat),]
dat5$Last.Update <- as.Date(dat5$Last.Update)
dat5$Last.Update <- as.Date(dat5$Last.Update)
View(dat5)
43359
dat5 <- dat[17103:43359,]
dat6 <- dat[43360:nrow(dat),]
dat5$Last.Update <- as.POSIXct(dat5$Last.Update)
dat5 <- dat[17103:43358,]
dat5$Last.Update <- as.POSIXct(dat5$Last.Update)
dat4$Last.Update <- as.POSIXct(dat4$Last.Update)
dat5$Last.Update <- as.POSIXct(dat5$Last.Update)
View(dat5)
dat5$Last.Update <- as.POSIXct(dat5$Last.Update, format = "%m/%d/%y %H:%M")
dat6$Last.Update <- as.POSIXct(dat6$Last.Update, format = "%m/%d/%y %H:%M")
# which.min(is.na(dat6$Last.Update))
# which.max(is.na(dat6$Last.Update))
datall <- bind_rows(dat1, dat2, dat3, dat4, dat5, dat6)
View(datall)
dat5 <- dat[17103:43358,]
dat5 <- dat[17103:43358,]
dat5$Last.Update <- as.Date(dat5$Last.Update)
# Cleaning date. Till 560 --> %d/%m/%Y %h:% // rest --> automatic as_datetime
dat1 <- dat[1:560,]
dat2 <- dat[561:7617,]
dat3 <- dat[7618:11034,]
dat4 <- dat[11035:17102,]
dat5 <- dat[17103:43358,]
dat6 <- dat[43359:nrow(dat),]
dat1$Last.Update <- as.POSIXct(dat1$Last.Update, format = "%m/%d/%Y %H:%M")
dat2$Last.Update <- as.POSIXct(dat2$Last.Update)
dat3$Last.Update <- as.POSIXct(dat3$Last.Update, format = "%m/%d/%y %H:%M")
dat4$Last.Update <- as.POSIXct(dat4$Last.Update)
dat5$Last.Update <- as.Date(dat5$Last.Update)
dat6$Last.Update <- as.Date(dat6$Last.Update, format = "%m/%d/%y %H:%M")
View(dat6)
View(dat5)
dat5 <- dat[17103:28137,]
dat5$Last.Update <- as.Date(dat5$Last.Update)
dat6 <- dat[28138:nrow(dat),]
dat1 <- dat[1:560,]
dat2 <- dat[561:7617,]
dat3 <- dat[7618:11034,]
dat4 <- dat[11035:17102,]
dat5 <- dat[17103:28137,]
dat6 <- dat[28138:nrow(dat),]
dat1$Last.Update <- as.POSIXct(dat1$Last.Update, format = "%m/%d/%Y %H:%M")
dat2$Last.Update <- as.POSIXct(dat2$Last.Update)
dat3$Last.Update <- as.POSIXct(dat3$Last.Update, format = "%m/%d/%y %H:%M")
dat4$Last.Update <- as.POSIXct(dat4$Last.Update)
dat5$Last.Update <- as.Date(dat5$Last.Update)
dat6$Last.Update <- as.Date(dat6$Last.Update, format = "%m/%d/%y %H:%M")
View(dat5)
# Cleaning date. Till 560 --> %d/%m/%Y %h:% // rest --> automatic as_datetime
dat1 <- dat[1:560,]
dat2 <- dat[561:7617,]
dat3 <- dat[7618:11034,]
dat4 <- dat[11035:17102,]
dat5 <- dat[17103:28136,]
dat6 <- dat[28137:nrow(dat),]
dat1$Last.Update <- as.POSIXct(dat1$Last.Update, format = "%m/%d/%Y %H:%M")
dat2$Last.Update <- as.POSIXct(dat2$Last.Update)
dat3$Last.Update <- as.POSIXct(dat3$Last.Update, format = "%m/%d/%y %H:%M")
dat4$Last.Update <- as.POSIXct(dat4$Last.Update)
dat5$Last.Update <- as.Date(dat5$Last.Update)
dat6$Last.Update <- as.Date(dat6$Last.Update, format = "%m/%d/%y %H:%M")
# which.min(is.na(dat6$Last.Update))
# which.max(is.na(dat6$Last.Update))
datall <- bind_rows(dat1, dat2, dat3, dat4, dat5, dat6)
# Cleaning date. Till 560 --> %d/%m/%Y %h:% // rest --> automatic as_datetime
dat1 <- dat[1:560,]
dat2 <- dat[561:7617,]
dat3 <- dat[7618:11034,]
dat4 <- dat[11035:17102,]
# Cleaning date. Till 560 --> %d/%m/%Y %h:% // rest --> automatic as_datetime
dat1 <- dat[1:560,]
dat2 <- dat[561:7617,]
dat3 <- dat[7618:11034,]
dat4 <- dat[11035:17102,]
dat5 <- dat[17103:28136,]
dat6 <- dat[28137:nrow(dat),]
dat1$Last.Update <- as.POSIXct(dat1$Last.Update, format = "%m/%d/%Y %H:%M")
dat2$Last.Update <- as.POSIXct(dat2$Last.Update)
dat3$Last.Update <- as.POSIXct(dat3$Last.Update, format = "%m/%d/%y %H:%M")
dat4$Last.Update <- as.POSIXct(dat4$Last.Update)
dat5$Last.Update <- as.POSIXct(dat5$Last.Update)
dat6$Last.Update <- as.POSIXct(dat6$Last.Update, format = "%m/%d/%y %H:%M")
# which.min(is.na(dat6$Last.Update))
# which.max(is.na(dat6$Last.Update))
datall <- bind_rows(dat1, dat2, dat3, dat4, dat5, dat6)
which.min(is.na(datall$Last.Update))
which.max(is.na(datall$Last.Update))
dat7 <- dat[28137:77354,]
dat1$Last.Update <- as.POSIXct(dat1$Last.Update, format = "%m/%d/%Y %H:%M")
dat2$Last.Update <- as.POSIXct(dat2$Last.Update)
dat3$Last.Update <- as.POSIXct(dat3$Last.Update, format = "%m/%d/%y %H:%M")
dat4$Last.Update <- as.POSIXct(dat4$Last.Update)
dat5$Last.Update <- as.POSIXct(dat5$Last.Update)
dat7$Last.Update <- as.POSIXct(dat7$Last.Update, format = "%m/%d/%y %H:%M")
# which.min(is.na(datall$Last.Update))
# which.max(is.na(datall$Last.Update))
datall <- bind_rows(dat1, dat2, dat3, dat4, dat5, dat6, dat7)
which.min(is.na(datall$Last.Update))
which.max(is.na(datall$Last.Update))
dat7 <- dat[28137:77354,]
# Cleaning date. Till 560 --> %d/%m/%Y %h:% // rest --> automatic as_datetime
dat1 <- dat[1:560,]
dat2 <- dat[561:7617,]
dat3 <- dat[7618:11034,]
dat4 <- dat[11035:17102,]
dat5 <- dat[17103:28136,]
dat6 <- dat[28137:38439,]
dat7 <- dat[38440:77354,]
dat1$Last.Update <- as.POSIXct(dat1$Last.Update, format = "%m/%d/%Y %H:%M")
dat2$Last.Update <- as.POSIXct(dat2$Last.Update)
dat3$Last.Update <- as.POSIXct(dat3$Last.Update, format = "%m/%d/%y %H:%M")
dat4$Last.Update <- as.POSIXct(dat4$Last.Update)
dat5$Last.Update <- as.POSIXct(dat5$Last.Update)
dat6$Last.Update <- as.POSIXct(dat6$Last.Update, format = "%m/%d/%y %H:%M")
dat7$Last.Update <- as.POSIXct(dat7$Last.Update, format = "%m/%d/%y %H:%M")
datall <- bind_rows(dat1, dat2, dat3, dat4, dat5, dat6, dat7)
which.min(is.na(datall$Last.Update))
which.max(is.na(datall$Last.Update))
View(dat7)
View(dat6)
dat7 <- dat[38440:77354,]
View(dat7)
datall <- bind_rows(dat1, dat2, dat3, dat4, dat5, dat6, dat7)
dat1$Last.Update <- as.POSIXct(dat1$Last.Update, format = "%m/%d/%Y %H:%M")
dat2$Last.Update <- as.POSIXct(dat2$Last.Update)
dat3$Last.Update <- as.POSIXct(dat3$Last.Update, format = "%m/%d/%y %H:%M")
dat4$Last.Update <- as.POSIXct(dat4$Last.Update)
dat5$Last.Update <- as.POSIXct(dat5$Last.Update)
dat6$Last.Update <- as.POSIXct(dat6$Last.Update, format = "%m/%d/%y %H:%M")
dat7$Last.Update <- as.POSIXct(dat7$Last.Update, format = "%m/%d/%y %H:%M")
datall <- bind_rows(dat1, dat2, dat3, dat4, dat5, dat6, dat7)
View(datall)
dat1 <- dat[1:560,]
dat2 <- dat[561:7617,]
dat3 <- dat[7618:11034,]
dat4 <- dat[11035:17102,]
dat5 <- dat[17103:28136,]
dat6 <- dat[28137:38439,]
dat7 <- dat[38440:56804,]
dat8 <- dat[56805:77354,]
dat1$Last.Update <- as.POSIXct(dat1$Last.Update, format = "%m/%d/%Y %H:%M")
dat2$Last.Update <- as.POSIXct(dat2$Last.Update)
dat3$Last.Update <- as.POSIXct(dat3$Last.Update, format = "%m/%d/%y %H:%M")
dat4$Last.Update <- as.POSIXct(dat4$Last.Update)
dat5$Last.Update <- as.POSIXct(dat5$Last.Update)
dat6$Last.Update <- as.POSIXct(dat6$Last.Update, format = "%m/%d/%y %H:%M")
dat7$Last.Update <- as.POSIXct(dat7$Last.Update, format = "%m/%d/%y %H:%M")
dat8$Last.Update <- as.POSIXct(dat8$Last.Update)
datall <- bind_rows(dat1, dat2, dat3, dat4, dat5, dat6, dat7)
which.min(is.na(datall$Last.Update))
which.max(is.na(datall$Last.Update))
View(datall)
dat6 <- dat[28137:38438,]
dat7 <- dat[38439:56804,]
dat8 <- dat[56805:77354,]
dat1$Last.Update <- as.POSIXct(dat1$Last.Update, format = "%m/%d/%Y %H:%M")
dat2$Last.Update <- as.POSIXct(dat2$Last.Update)
dat3$Last.Update <- as.POSIXct(dat3$Last.Update, format = "%m/%d/%y %H:%M")
dat4$Last.Update <- as.POSIXct(dat4$Last.Update)
dat5$Last.Update <- as.POSIXct(dat5$Last.Update)
dat6$Last.Update <- as.POSIXct(dat6$Last.Update, format = "%m/%d/%y %H:%M")
dat7$Last.Update <- as.POSIXct(dat7$Last.Update, format = "%m/%d/%y %H:%M")
dat8$Last.Update <- as.POSIXct(dat8$Last.Update)
datall <- bind_rows(dat1, dat2, dat3, dat4, dat5, dat6, dat7)
which.min(is.na(datall$Last.Update))
which.max(is.na(datall$Last.Update))
View(dat)
dat7 <- dat[38440:56804,]
dat7$Last.Update <- as.POSIXct(dat7$Last.Update)
dat7$Last.Update <- as.POSIXct(dat7$Last.Update)
dat7 <- dat[38440:56804,]
dat7$Last.Update <- as.POSIXct(dat7$Last.Update, format = "%Y-%m-%d %H:%M:%s")
dat8$Last.Update <- as.POSIXct(dat8$Last.Update)
which.min(is.na(datall$Last.Update))
datall <- bind_rows(dat1, dat2, dat3, dat4, dat5, dat6, dat7)
which.min(is.na(datall$Last.Update))
which.max(is.na(datall$Last.Update))
dat1 <- dat[1:560,]
dat2 <- dat[561:7617,]
dat3 <- dat[7618:11034,]
dat4 <- dat[11035:17102,]
dat5 <- dat[17103:28136,]
dat6 <- dat[28137:38439,]
dat7 <- dat[38440:43357,]
dat1$Last.Update <- as.POSIXct(dat1$Last.Update, format = "%m/%d/%Y %H:%M")
dat2$Last.Update <- as.POSIXct(dat2$Last.Update)
dat3$Last.Update <- as.POSIXct(dat3$Last.Update, format = "%m/%d/%y %H:%M")
dat4$Last.Update <- as.POSIXct(dat4$Last.Update)
dat5$Last.Update <- as.POSIXct(dat5$Last.Update)
dat6$Last.Update <- as.POSIXct(dat6$Last.Update, format = "%m/%d/%y %H:%M")
dat7$Last.Update <- as.POSIXct(dat7$Last.Update, format = "%Y-%m-%d %H:%M:%s")
dat8$Last.Update <- as.POSIXct(dat8$Last.Update)
datall <- bind_rows(dat1, dat2, dat3, dat4, dat5, dat6, dat7)
which.min(is.na(datall$Last.Update))
which.max(is.na(datall$Last.Update))
View(datall)
dat7 <- dat[38440:43357,]
dat7$Last.Update <- as.POSIXct(dat7$Last.Update, format = "%Y-%m-%d %H:%M")
View(dat7)
dat8 <- dat[43358:77354,]
dat8$Last.Update <- as.POSIXct(dat8$Last.Update)
View(dat8)
View(dat8)
dat7 <- dat[38440:43358,]
dat8 <- dat[43359:77354,]
dat7$Last.Update <- as.POSIXct(dat7$Last.Update, format = "%Y-%m-%d %H:%M")
dat8$Last.Update <- as.POSIXct(dat8$Last.Update)
View(dat7)
View(dat7)
View(dat8)
dat9 <- dat[45928:77354,]
dat8$Last.Update <- as.POSIXct(dat8$Last.Update)
dat8$Last.Update <- as.POSIXct(dat8$Last.Update)
dat8 <- dat[43359:45927,]
dat8$Last.Update <- as.POSIXct(dat8$Last.Update)
dat8 <- dat[43359:45927,]
dat8$Last.Update <- as.POSIXct(dat8$Last.Update)
View(dat8)
dat8$Last.Update <- as.POSIXct(dat8$Last.Update, format = "%m/%d/%Y %H:%M")
dat9 <- dat[45928:77354,]
dat9$Last.Update <- as.POSIXct(dat8$Last.Update)
dat9$Last.Update <- as.POSIXct(dat8$Last.Update)
View(dat9)
dat9$Last.Update <- as.POSIXct(dat8$Last.Update, format = "%Y-%m-%d %H:%M")
dat9 <- dat[45928:77354,]
dat9$Last.Update <- as.POSIXct(dat8$Last.Update, format = "%Y-%m-%d %H:%M")
dat9$Last.Update <- as.POSIXct(dat8$Last.Update, format = "%Y-%m-%d %H:%M:%s")
dat9$Last.Update <- as.POSIXct(dat9$Last.Update, format = "%Y-%m-%d %H:%M:%s")
dat9$Last.Update <- as.POSIXct(dat9$Last.Update, format = "%Y-%m-%d %H:%M:%S")
dat9 <- dat[45928:77354,]
dat9$Last.Update <- as.POSIXct(dat9$Last.Update, format = "%Y-%m-%d %H:%M:%S")
datall <- bind_rows(dat1, dat2, dat3, dat4, dat5, dat6, dat7)
which.min(is.na(datall$Last.Update))
which.min(is.na(datall$Last.Update))
table(is.na(datall$Last.Update))
View(datall)
glimpse(datall$Last.Update)
lubridate::guess_formats(datall$Last.Update)
View(datall)
# Cleaning date. Till 560 --> %d/%m/%Y %h:% // rest --> automatic as_datetime
dat1 <- dat[1:560,]
dat2 <- dat[561:7617,]
dat3 <- dat[7618:11034,]
dat4 <- dat[11035:17102,]
dat5 <- dat[17103:28136,]
dat6 <- dat[28137:38439,]
dat7 <- dat[38440:43358,]
dat8 <- dat[43359:45927,]
dat9 <- dat[45928:77354,]
dat1$Last.Update <- as.Date(dat1$Last.Update, format = "%m/%d/%Y %H:%M")
dat2$Last.Update <- as.Date(dat2$Last.Update)
dat3$Last.Update <- as.Date(dat3$Last.Update, format = "%m/%d/%y %H:%M")
dat4$Last.Update <- as.Date(dat4$Last.Update)
dat5$Last.Update <- as.Date(dat5$Last.Update)
dat6$Last.Update <- as.Date(dat6$Last.Update, format = "%m/%d/%y %H:%M")
dat7$Last.Update <- as.Date(dat7$Last.Update, format = "%Y-%m-%d %H:%M")
dat8$Last.Update <- as.Date(dat8$Last.Update, format = "%m/%d/%Y %H:%M")
dat9$Last.Update <- as.Date(dat9$Last.Update, format = "%Y-%m-%d %H:%M:%S")
datall <- bind_rows(dat1, dat2, dat3, dat4, dat5, dat6, dat7)
datall <- bind_rows(dat1, dat2, dat3, dat4, dat5, dat6, dat7)
View(datall)
dataall %>% group_by(Country.Region, Last.Update) %>% summarise(confirmed = sum(Confirmed))
datall %>% group_by(Country.Region, Last.Update) %>% summarise(confirmed = sum(Confirmed))
datall %>%
group_by(Country.Region, Last.Update) %>%
summarise(confirmed = sum(Confirmed), deaths = sum(Deaths), active = sum(Active))
datall %>%
group_by(Country.Region, Last.Update) %>%
summarise(confirmed = sum(Confirmed, na.rm = T), deaths = sum(Deaths, na.rm = T), active = sum(Active, na.rm = T))
datall %>%
group_by(Country.Region, Last.Update) %>%
summarise(confirmed = sum(Confirmed, na.rm = F), deaths = sum(Deaths, na.rm = F), active = sum(Active, na.rm = F))
datall <- datall %>%
group_by(Country.Region, Last.Update) %>%
summarise(confirmed = sum(Confirmed, na.rm = F), deaths = sum(Deaths, na.rm = F), active = sum(Active, na.rm = F))
View(datall)
datall <- bind_rows(dat1, dat2, dat3, dat4, dat5, dat6, dat7)
datall <- datall %>%
group_by(Country.Region, Last.Update) %>%
summarise(confirmed = sum(Confirmed, na.rm = T), deaths = sum(Deaths, na.rm = T), active = sum(Active, na.rm = T))
datall <- bind_rows(dat1, dat2, dat3, dat4, dat5, dat6, dat7)
datall <- datall %>%
group_by(Country.Region, Last.Update) %>%
summarise(confirmed = sum(Confirmed, na.rm = F), deaths = sum(Deaths, na.rm = F), active = sum(Active, na.rm = F))
g <- ggplot(datall)
g + geom_bar(aes(y = confirmed), stat = 'count')
g + geom_bar(aes(x = confirmed), stat = 'count')
datall <- datall %>%
group_by(Country.Region, Last.Update) %>%
summarise(confirmed = sum(Confirmed, na.rm = F), deaths = sum(Deaths, na.rm = F), active = sum(Active, na.rm = F)) %>% ungroup()
datall <- bind_rows(dat1, dat2, dat3, dat4, dat5, dat6, dat7)
datall <- datall %>%
group_by(Country.Region, Last.Update) %>%
summarise(confirmed = sum(Confirmed, na.rm = F), deaths = sum(Deaths, na.rm = F), active = sum(Active, na.rm = F)) %>% ungroup()
g + geom_bar(aes(x = confirmed), stat = 'count')
g + geom_bar(aes(x = confirmed, y = Country.Region), stat = 'count')
g + geom_bar(aes(x = confirmed, y = Country.Region), stat = 'identity')
g + geom_bar(aes(y = confirmed, x = Country.Region), stat = 'identity')
View(datall)
View(dat)
datall <- bind_rows(dat1, dat2, dat3, dat4, dat5, dat6, dat7)
View(datall)
datall <- datall %>%
group_by(Country.Region, Last.Update) %>%
summarise(confirmed = sum(Confirmed, na.rm = F), deaths = sum(Deaths, na.rm = F), active = sum(Active, na.rm = F), recovered = sum(Recovered, na.rm = F)) %>% ungroup()
g <- ggplot(datall)
g + geom_bar(aes(y = confirmed, x = Country.Region), stat = 'identity')
g + geom_bar(aes(y = deaths, x = Country.Region), stat = 'identity')
g + geom_bar(aes(y = active, x = Country.Region), stat = 'identity')
g + geom_bar(aes(y = recovered, x = Country.Region), stat = 'identity')
g <- ggplot(datall) + theme(axis.title.x = element_text(angle = 90, hjust = 1))
# Plots of country vs counts
g + geom_bar(aes(y = confirmed, x = Country.Region), stat = 'identity')
g <- ggplot(datall) + theme(axis.title.x = element_text(angle = 90, hjust = 1))
# Plots of country vs counts
g + geom_bar(aes(y = confirmed, x = Country.Region), stat = 'identity')
g <- ggplot(datall) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Plots of country vs counts
g + geom_bar(aes(y = confirmed, x = Country.Region), stat = 'identity')
g + geom_bar(aes(y = deaths, x = Country.Region), stat = 'identity')
g + geom_bar(aes(y = active, x = Country.Region), stat = 'identity')
g + geom_bar(aes(y = recovered, x = Country.Region), stat = 'identity')
View(datall)
# plots of global vs time
## add filter for time and country
g + geom_line(aes(y = confirmed, x = Last.Update), stat = 'identity')
# plots of global vs time
## add filter for time and country
g + geom_line(aes(y = confirmed, x = Last.Update))
g + geom_line(aes(y = deaths, x = Last.Update), stat = 'identity')
View(datall)
# plots of global vs time
## add filter for time and country
g + geom_line(aes(y = confirmed, x = Last.Update))
class(datall$Last.Update)
# plots of global vs time
## add filter for time and country
g + geom_line(aes(x = confirmed, y = Last.Update))
# plots of global vs time
## add filter for time and country
g + geom_line(aes(y = confirmed, x = Last.Update)) + scale_x_date(date_minor_breaks = "2 day")
# plots of global vs time
## add filter for time and country
datall2 <- datall %>%
group_by(Last.Update) %>%
summarise(confirmed = sum(Confirmed, na.rm = F), deaths = sum(Deaths, na.rm = F), active = sum(Active, na.rm = F), recovered = sum(Recovered, na.rm = F)) %>% ungroup()
# plots of global vs time
## add filter for time and country
datall2 <- datall %>%
group_by(Last.Update) %>%
summarise(confirmed = sum(confirmed, na.rm = F), deaths = sum(deaths, na.rm = F), active = sum(active, na.rm = F), recovered = sum(deaths, na.rm = F)) %>% ungroup()
g <- ggplot(datall2) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
g + geom_line(aes(y = confirmed, x = Last.Update)) + scale_x_date(date_minor_breaks = "2 day")
g + geom_line(aes(y = confirmed, x = Last.Update)) +
scale_x_date(date_minor_breaks = "2 day", date_labels = "%d/%m/%Y")
View(datall2)
lubridate::guess_formats(datall$Last.Update)
lubridate::guess_formats(datall$Last.Update, orders = "Bdy")
lubridate::guess_formats(datall$Last.Update, orders = c("%y-%m-%d"), print_matches = T)
lubridate::guess_formats(as.character(datall$Last.Update), orders = c("%y-%m-%d"), print_matches = T)
lubridate::guess_formats(as.character(datall$Last.Update), orders = c("%y-%m-%d", "%Y-%m-%d"), print_matches = T)
lubridate::guess_formats(as.character(dat$Last.Update),
orders = c("%m/%d/%Y %H:%M",
"%Y-%m-%d %H:%M:%S"))
lubridate::guess_formats(as.character(dat$Last.Update),
orders = c("%m/%d/%Y %H:%M",
"%Y-%m-%d %H:%M:%S"), print_matches = T)
lubridate::guess_formats(as.character(datall$Last.Update), orders = c("%y-%m-%d", "%Y-%m-%d"), print_matches = T)
lubridate::guess_formats(as.character(datall$Last.Update), orders = c("%y-%m-%d", "%Y-%m-%d"), print_matches = T)
arrange(datall2$Last.Update)
order(datall2$Last.Update)
sort(datall2$Last.Update)
format(datall$Last.Update, "%Y-%m-%d")
format(datall$Last.Update, "%y-%m-%d")
sort(format(datall$Last.Update, "%y-%m-%d"))
datall$Last.Update <- format(datall$Last.Update, "%y-%m-%d"))
# plots of global vs time
## add filter for time and country
datall2 <- datall %>%
group_by(Last.Update) %>%
summarise(confirmed = sum(confirmed, na.rm = F), deaths = sum(deaths, na.rm = F), active = sum(active, na.rm = F), recovered = sum(deaths, na.rm = F)) %>% ungroup()
g <- ggplot(datall2) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
g + geom_line(aes(y = confirmed, x = Last.Update)) +
scale_x_date(date_minor_breaks = "2 day", date_labels = "%d/%m/%Y")
g + geom_line(aes(y = confirmed, x = Last.Update)) +
scale_x_date(date_minor_breaks = "2 day", date_labels = "%d/%m/%Y")
View(datall2)
datall$Last.Update <- format(datall$Last.Update, "%y-%m-%d"))
datall$Last.Update <- format(datall$Last.Update, "%y-%m-%d")
# plots of global vs time
## add filter for time and country
datall2 <- datall %>%
group_by(Last.Update) %>%
summarise(confirmed = sum(confirmed, na.rm = F), deaths = sum(deaths, na.rm = F), active = sum(active, na.rm = F), recovered = sum(deaths, na.rm = F)) %>% ungroup()
g <- ggplot(datall2) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
g + geom_line(aes(y = confirmed, x = Last.Update)) +
scale_x_date(date_minor_breaks = "2 day", date_labels = "%d/%m/%Y")
class(datall$Last.Update)
View(datall)
datall$Last.Update <- strftime(datall$Last.Update, "%y-%m-%d")
datall$Last.Update
class(datall$Last.Update)
datall$Last.Update <- as.Date(strftime(datall$Last.Update, "%y-%m-%d"))
datall$Last.Update
class(datall$Last.Update)
datall$Last.Update <- as.Date(strftime(datall$Last.Update, "%y-%m-%d"))
datall$Last.Update <- as.Date(format(datall$Last.Update, "%y-%m-%d"))
# plots of global vs time
## add filter for time and country
datall2 <- datall %>%
group_by(Last.Update) %>%
summarise(confirmed = sum(confirmed, na.rm = F), deaths = sum(deaths, na.rm = F), active = sum(active, na.rm = F), recovered = sum(deaths, na.rm = F)) %>% ungroup()
g <- ggplot(datall2) + theme(axis.text.x = element_text(angle = 90, hjust = 1))
g + geom_line(aes(y = confirmed, x = Last.Update)) +
scale_x_date(date_minor_breaks = "2 day", date_labels = "%d/%m/%Y")
g + geom_line(aes(y = confirmed, x = Last.Update)) +
scale_x_date(date_minor_breaks = "1 day", date_labels = "%d/%m/%Y")
g + geom_line(aes(y = deaths, x = Last.Update), stat = 'identity')
g + geom_line(aes(y = deaths, x = Last.Update), stat = 'identity')
g + geom_line(aes(y = active, x = Last.Update), stat = 'identity')
g + geom_line(aes(y = recovered, x = Last.Update), stat = 'identity')
} # End of shiny function
g + geom_line(aes(y = confirmed, x = Last.Update)) +
scale_x_date(date_minor_breaks = "1 day", date_labels = "%d/%b/%Y")
g + geom_line(aes(y = confirmed, x = Last.Update)) +
scale_x_date(date_minor_breaks = "1 day", date_labels = "%d %b/%Y")
g + geom_line(aes(y = confirmed, x = Last.Update)) +
scale_x_date(date_minor_breaks = "1 day", date_labels = "%d %b %Y")
datall$Last.Update <- as.Date(format(datall$Last.Update, "%Y-%m-%d"))
datall$Last.Update
format(datall$Last.Update, "%Y-%m-%d")
datall$Last.Update <- as.Date(format(datall$Last.Update, "%Y-%m-%d"))
View(datall)
g + geom_line(aes(y = confirmed, x = Last.Update)) +
scale_x_date(date_minor_breaks = "1 day", date_labels = "%d %b")
g <- ggplot(datall2) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_date(date_minor_breaks = "1 day", date_labels = "%d %b")
g + geom_line(aes(y = confirmed, x = Last.Update))
g + geom_line(aes(y = deaths, x = Last.Update))
g + geom_line(aes(y = active, x = Last.Update))
g + geom_line(aes(y = recovered, x = Last.Update))
g <- ggplot(datall) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_date(date_minor_breaks = "1 day", date_labels = "%d %b")
g + geom_line(aes(y = confirmed, x = Last.Update))
g + geom_line(aes(y = deaths, x = Last.Update))
g + geom_line(aes(y = active, x = Last.Update))
g <- ggplot(datall2) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_date(date_minor_breaks = "1 day", date_labels = "%d %b")
g + geom_line(aes(y = confirmed, x = Last.Update))
g + geom_line(aes(y = deaths, x = Last.Update))
g + geom_line(aes(y = active, x = Last.Update))
g + geom_line(aes(y = recovered, x = Last.Update))
g + geom_line(aes(y = recovered, x = Last.Update, color = Country.Region))
g <- ggplot(datall2) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_date(date_minor_breaks = "1 day", date_labels = "%d %b")
g + geom_line(aes(y = recovered, x = Last.Update, color = Country.Region))
g <- ggplot(datall) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
scale_x_date(date_minor_breaks = "1 day", date_labels = "%d %b")
g + geom_line(aes(y = active, x = Last.Update))
